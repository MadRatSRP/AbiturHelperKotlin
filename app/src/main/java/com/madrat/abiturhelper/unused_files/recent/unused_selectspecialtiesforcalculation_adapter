class CompleteSpecialtiesAdapter(/*@NonNull onItemCheckListener: OnItemCheckListener?*/)
    : RecyclerView.Adapter<CompleteSpecialtiesAdapter.CompleteSpecialtiesHolder>(){

    private var checker: Int? = null
    private var selectedSpecialties = ArrayList<Specialty>()
    private var specialties = ArrayList<Specialty>()

    private var itemStateArrayUNTI = SparseBooleanArray()
    private var itemStateArrayFEU = SparseBooleanArray()

    //private var itemStateArray = SparseBooleanArray()

    /*interface OnItemCheckListener {
        fun onItemCheck(specialty: Specialty)
        fun onItemUncheck(specialty: Specialty)
    }
    init {
        this.onItemCheckListener = onItemCheckListener
    }*/

    fun updateSpecialtiesList(new_specialties: ArrayList<Specialty>) {
        specialties.clear()
        specialties.addAll(new_specialties)
        this.notifyDataSetChanged()
    }
    fun saveNewChecker(newChecker: Int) {
        this.checker = newChecker
    }
    fun returnSelectedSpecialties()
            = selectedSpecialties

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CompleteSpecialtiesHolder
            = CompleteSpecialtiesHolder(parent.inflate(com.madrat.abiturhelper.R.layout.list_complete_specialties))

    override fun onBindViewHolder(holder: CompleteSpecialtiesHolder, position: Int){
        val selectedSpecialty = specialties[position]

        holder.bind(selectedSpecialty, position)
        holder.setOnClickListener(View.OnClickListener {
            /*holder.completeCheckbox.isChecked = !holder.completeCheckbox.isChecked
            if (holder.completeCheckbox.isChecked) {
                //onItemCheckListener?.onItemCheck(currentSpecialty)
                selectedSpecialties.add(selectedSpecialty)
                showLog("chosenSpecialties: ${selectedSpecialties.size}")
            } else {
                //onItemCheckListener?.onItemUncheck(currentSpecialty)
                selectedSpecialties.remove(selectedSpecialty)
                showLog("chosenSpecialties${selectedSpecialties.size}")
            }*/

            /*if (!itemStateArray.get(position, false)) {
                holder.completeCheckbox.isChecked = true
                selectedSpecialties.add(selectedSpecialty)
                itemStateArray.put(position, true)
            }
            else {
                holder.completeCheckbox.isChecked = false
                selectedSpecialties.remove(selectedSpecialty)
                itemStateArray.put(position, false)
            }*/

            val adapterPosition = holder.adapterPosition
            // УНТИ
            if (checker == 0) {
                if (!itemStateArrayUNTI.get(adapterPosition, false)) {
                    holder.completeCheckbox.isChecked = true
                    selectedSpecialties.add(selectedSpecialty)
                    showLog("chosenSpecialties${selectedSpecialties.size}")
                    itemStateArrayUNTI.put(adapterPosition, true)
                }
                else {
                    holder.completeCheckbox.isChecked = false
                    selectedSpecialties.remove(selectedSpecialty)
                    showLog("chosenSpecialties${selectedSpecialties.size}")
                    itemStateArrayUNTI.put(adapterPosition, false)
                }
            }
            // ФЭУ
            else if (checker == 1) {
                if (!itemStateArrayFEU.get(adapterPosition, false)) {
                    holder.completeCheckbox.isChecked = true
                    selectedSpecialties.add(selectedSpecialty)
                    itemStateArrayFEU.put(adapterPosition, true)
                }
                else {
                    holder.completeCheckbox.isChecked = false
                    selectedSpecialties.remove(selectedSpecialty)
                    itemStateArrayFEU.put(adapterPosition, false)
                }
            }
        })
    }


    override fun getItemCount(): Int
            = specialties.size

    inner class CompleteSpecialtiesHolder internal constructor(override val containerView: View)
        : RecyclerView.ViewHolder(containerView), LayoutContainer {

        fun bind(specialty: Specialty, position: Int) {

            specialtyName.text = specialty.shortName
            specialtyEntriesTotalValue.text = specialty.entriesTotal.toString()
            specialtyEntriesFreeValue.text = specialty.entriesFree.toString()
            specialtyAmountOfStatementsValue.text = specialty.amountOfStatements.toString()
            specialtyMinimalScoreText.text = specialty.scoreTitle
            specialtyMinimalScoreValue.text = specialty.minimalScore.toString()

            /*if (!itemStateArray.get(position, false)) {
                completeCheckbox.isChecked = false
            } else {
                completeCheckbox.isChecked = true
            }*/

            if (checker == 0) {
                completeCheckbox.isChecked = itemStateArrayUNTI.get(position, false)
            }
            else if (checker == 1) {
                completeCheckbox.isChecked = itemStateArrayFEU.get(position, false)
            }


        }

        fun setOnClickListener(onClickListener: View.OnClickListener) {
            //containerView.setOnClickListener { onClickListener }
            containerView.setOnClickListener(onClickListener)
        }
    }
}